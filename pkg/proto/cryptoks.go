//
//  Copyright 2023 PayPal Inc.
//
//  Licensed to the Apache Software Foundation (ASF) under one or more
//  contributor license agreements.  See the NOTICE file distributed with
//  this work for additional information regarding copyright ownership.
//  The ASF licenses this file to You under the Apache License, Version 2.0
//  (the "License"); you may not use this file except in compliance with
//  the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

package proto

import (
	"encoding/hex"
	"errors"
	"time"

	"juno/third_party/forked/golang/glog"
)

type (
	IEncryptionKeyStore interface {
		GetEncryptionKey() (key []byte, version uint32, err error)
		GetDecryptionKey(version uint32) (key []byte, err error)
		NumKeys() (numKeys int)
	}

	testKeyStoreT struct {
		keys    [][]byte
		numKeys int
	}
)

var (
	serverKeyStore, clientKeyStore IEncryptionKeyStore //newTestKeyStore()
	ErrFailToGetEncryptionKey      = errors.New("fail to get encryption key")
	ErrFailTogetKeyStore           = errors.New("fail to get key store")
)

func InitializeKeyStore(pType PayloadType, ks IEncryptionKeyStore) {
	switch pType {
	case PayloadTypeEncryptedByClient:
		clientKeyStore = ks
	case PayloadTypeEncryptedByProxy:
		serverKeyStore = ks
	default:
		glog.Errorf("unsupported payload type")
	}
}

func getKeyStore(pType PayloadType) (ks IEncryptionKeyStore, err error) {
	switch pType {
	case PayloadTypeEncryptedByClient:
		ks = clientKeyStore
	case PayloadTypeEncryptedByProxy:
		ks = serverKeyStore
	default:
		err = ErrUnsupportedPayloadType
	}
	if err == nil && ks == nil {
		err = ErrFailTogetKeyStore
	}
	return
}

func newTestKeyStore() (IEncryptionKeyStore, IEncryptionKeyStore) {
	numKeys := len(testAES256HexKeys)
	ks := &testKeyStoreT{
		keys:    make([][]byte, numKeys),
		numKeys: numKeys,
	}
	ks1 := &testKeyStoreT{
		keys:    make([][]byte, numKeys),
		numKeys: numKeys,
	}

	var err error
	for i, str := range testAES256HexKeys {
		ks.keys[i], err = hex.DecodeString(str)
		if err != nil {
			glog.Exitf("fail to generate keys for test encryption key store, exiting...")
		}
		ks1.keys[numKeys-1-i] = ks.keys[i]
	}

	return ks, ks1
}

func newClientTestKeyStore() IEncryptionKeyStore {
	numKeys := len(testAES256HexKeys)
	ks := &testKeyStoreT{
		keys:    make([][]byte, numKeys),
		numKeys: numKeys,
	}

	var err error
	for i, str := range testAES256HexKeys {
		ks.keys[numKeys-i-1], err = hex.DecodeString(str)
		if err != nil {
			glog.Exitf("fail to generate keys for test encryption key store, exiting...")
		}
	}
	return ks
}

func (ks *testKeyStoreT) GetEncryptionKey() (key []byte, version uint32, err error) {
	version = uint32(int(time.Now().Unix()) % ks.numKeys)
	key = ks.keys[version]
	return
}

func (ks *testKeyStoreT) GetDecryptionKey(version uint32) (key []byte, err error) {
	if int(version) >= ks.numKeys {
		err = ErrFailToGetEncryptionKey
		return
	}
	key = ks.keys[version]
	return
}

func (ks *testKeyStoreT) NumKeys() int {
	return ks.numKeys
}

var (
	testAES256HexKeys []string = []string{
		"E1E7B65FC73DDCE65FD49FBC834F6DBC4318A511CEB6A58B1C4E9ACED5B08701",
		"76B86D234E5F3397E3C70EB66E3DC8CC814598957418A5D9EE23E32284953B65",
		"2D96BBCCCE7DF375FC8DBCFBD04EF22E4BC6CB8781FCBA3DE39530763B9A0AB8",
		"E644BC31A85F9652939AAD8A4B8B47A7DBFD8C485952D0669D310A3A7B30A4D3",
		"7571E2221F9B57E31D6E96CB40A1D93C95F312548ED7104D26DB1AD11AA758BE",
		"2DF9BD77B354B45C6185E70C6E8DE0551106F2566F6CEC58EB24CA86F1C66F43",
		"56FD997E548020D1D0E32259F7EE3E767432A8A9152DAD09078300E8D2612694",
		"91307951D17052ECF1C2D1F95ECD4FF4A93F81A5F71572A4397983DC7DCD3FFA",
		"FD36158DF8A6D8B80CD09CE5867D9D7E93F2FBA98744E0114020A8EDB9152C03",
		"C4F02F4CDB0E2473CD8A3A3CBAC528ADAB2043A65F53B7108E8C35631EE5881A",
		"B857F5C76430F0E884C32CEC3C6A2E0DA0E20970A42D9FB9F42542ABA66F0745",
		"E44C85071ECF637ED01898460659CED8ACFA24FD49AE38FE13187C4DE80EE3D8",
		"BC4DF528FFDD73D6DD660EE4E36E0C3169EE2D2FD373CF5A6FF1E41F322E5941",
		"977FEA1ED47013D200C8AA57375290B86991C5F6B8A009B41E12C66CD972D822",
		"BB50ED8142DE7B11C7F8BB213FA1FF7BD133E765DE5C5DE8E2D78BE75A39124B",
		"5B18CEBB2DDD3D32063FED109E9B07F0AEBDBB81D0027AD6267D10BFA8FB2D3D",
		"4319BE77678729DFF5C8AC448DA6428882BB749D521E611875D4C51FCD916A3A",
		"2F46150CA48A1662AE70BAA8FD9B68B08CE09F85576347E616C377356B8903B7",
		"85A5EE5A3CCE7BBF85D0EAC33F8840BE1D830B670A589666D9AD7CC86B44CFBE",
		"6A651D363C5467192A6B0738C04C7F1986E6DFA4C05DE05806D0BBF39A2ED481",
		"9B7B797C80EF6AC40B76DF7A4889831F1CE7BF9588A7D61CC99E99CC85F16FBF",
		"22892BAAC61A67932791133C0DA9E3ED66D8F8C8C4FB02CCF52B56D2CB4BC2B2",
		"E86D1BA6BCC3C213FD8CB5978EF7FA45968ADDC2DD04025A80E820DEC3E43A36",
		"56850BE10A41B20B57EC6F4D95654F6EA25F0A89FF197662C3D11EA422F80590",
		"9F480BA9475FF47423F0E75B750429BE261A84FDCB2440FFAC6C6DF12A230C8C",
		"EF79494A6D00AC1DCF3FEB057A83C9FB62F459EB2EB35B9C0023F31C5A7B1C5C",
		"B832C689D37A1D5AA1A31FFA52C7C36D14AD672B1E50F6F4514CBC10FD68D35F",
		"5A523FD0603AB9D0FD2E94F55B4E11065EC9069B9236D13375303E76AFA34B4B",
		"83FF6C2B2087657278452702DB73B8B86A2BB86677558097FE886558711F11FC",
		"4A055A3CEDA147815E880C3E82D9C393020F56FD0D75321040DBEC8ED5BC6F2C",
		"3CF06DE9038F68B32DB649B7E71082466E8758DB4EEF173FDDB06181422489C0",
		"F85F67799AFCDD6694182E0F0C8E67ED1886ABEB8B0DF9617063543F89DCC182",
		"74C78CF2A4663C7CA9C1E9308A5051A94A91D3D1D0EE8E7DA09A7728CFE004E7",
		"FC5EB45EDC60C66C09C5ABD83007B2F1B6ED9B0C666746CB3F3A6D50C24139B5",
		"4D8EB39C2964E81DD9E46FC5BD40696F6C2AAD5F266C02F3C954D2A967E7898E",
		"7BD67AEFDE0235C9D0AB048A22B60430D1657B94F027492BE2BEA60217486A68",
		"785A95660D5634DDB7FEB30BB85D33E70D3D2B59D5C8DB5D1811845B40BC3782",
		"738D14F9EE4B7B8B7173A96B45806A90B6DCFB491611837D14D7AC761FE2F431",
		"A6A4333D916C674DE90FBF5BAA83C84FE86E21583BC39F1DA1BC14383DF0556D",
		"C0002DA9963F8E5CDF78092B98F187ED994126C7ED6918E9AC81D40BA8FDB619",
		"669235E1B4F4409DC315F4DFAD75877D33E556F6DC63E5DE96D7F1D6639A69F5",
		"CE8C6BBBC37251B5B5C3D9AE7558B1BB2B9C2F6AD10F12460CD6AEF1C6AC6DF4",
		"67EC2A17FB0A3F0358BD328D35926D44F22405685C4E6F277FFEBB5476826D2F",
		"1B75153375B1CD9D4099476BADF03F7AA566EA76D419672A5B3EA25595D3C71C",
		"40BEAECD10307BF6BB185ED7C89EBA0A1C8DB9DFFAEFB30E70D603D566470D26",
		"65A23785225B0AF089973BC9077986F40BE4F93DCE79B6BD318CAD4540D48E13",
		"94349AD6533210683B5FAC8CA2AB39ACCC60BFDEA714C27342D693758D385A0F",
		"8EA0211D23040B5F69E894533048EF960343CFC3D6CC84BAF98194FA48D7A363",
		"ABAA58FF91376D00BB0A5754C018A9BAEF9DFBB4F3FB04A31F78604DFE1B4A14",
		"9C0E2B0F2AA72F14FAD29AFAA0929A596EADF86F474719D7A5BB2261450098A4",
		"7BF8924E47843D64A430039D6D6B8DFB098546A4D305C2521089510FF9391C13",
		"D38F72A2FC43D631E8A72310BD4407989E4C1E7FC5C29D1E05578A1102969F99",
		"F4B6E2FD0AADFC83F8092A242FC221E7CF6043000878015C8FA1A7553DFAB4CD",
		"68891DFB1D40CA594B8548BBF3E0C15D63BFC17213DE444637D8C67F9750BE20",
		"5105427787F376B2FCA7F87E6C0B06C2381E89B48B76919B82F37D58E0300783",
		"1E3490D7C3BFC319CDC201C840E88D4D65C1BAE1FE102C99AFD9B14B4024E523",
		"5A03CD6F7CE129CEAC2950DDBECE82DEC882D4424CC1370AD417B630A3AA27DA",
		"AAABDC014FD082D810D9EBA5F9C96916EE9FA9DFEF69BAC9883DF527E10C882C",
		"82956E740BEB71AED5FB76E62A5EF03DD3EB5BBFCB8C4BAE260E62D6C2AB7B56",
		"5A1EA2B5FD7D8486DE45495C8E578FA7342B3FE7E646358D584ADED31191C95B",
		"FC8CE784D00E1B6212FE63F6C672C75C627DD840952DA6A4221F7B0FAF817F51",
		"BA7055583291ECB8C7E9840BA7395FD06066D3AE4A4EAB14E4986C0C09C5B706",
		"CCF4FCFC7B4C2B368D87680F8FCAB0F4FE721D7B8C4B6F160C16420C23D810C0",
		"DC7444CC1BB2734E6FABB66468229D989EF87C954B4A1A71616F9C5E00A6DC4F",
		"205E37468496996F23C80CC0BF0CB6D1AE29EFFBD0DF316A01C04C145FD65143",
		"CF564F782308B81AC52AD7D1917D9F85099E7003C5562F90499A36D2B0D858BB",
		"D6E854C536BF9A9FBA305053EC161F59D6AC3DA991CC4FC9CA6B1200F597EAEA",
		"54032452397DFA68B0EE555C421C741D21D8D3A7B818466268CEEA2472FC6FA6",
		"BD4F9665DFFA5A3E902F5E2F62E6C5CDDFDB181D3C31F9B61D595E02031CE610",
		"6BE8AF64D6A338A7254DF6441F49236E9C20A0149DD27B5209059698C02E332B",
		"BB64B37C182C16A854116F75568395601C031E75D2152FFA185A75A94176227A",
		"50CE897D6EFE6BFBBFB195C86B9CBD2DBDC6ABB68A794104384F996629D20C82",
		"6CBADA8FAFE2A0628162398C23526CFA26A26DEB667A98F55F11B36A875A6841",
		"C74EEE583D5A67C564F7067C85FE41A8354A8B69A69FE829910E897A2C801317",
		"1A10E089E01E1E79E3F5393E9E176F757D5BCF231F5F4E0531650AAB331CD5C0",
		"D908641B8190C0C682A601E8824EB2DFD93276D86ED23C05A487B333EA0AD97E",
		"6010C041BEA70DF57165B2F273981E8F127457A47311951E0F9837BD27C00B3A",
		"C23175FBF2F1DC7967E27F86C570A4D65F425EFCB47F339FC74A61F4FAE1F8FE",
		"8918643E8F2A91F218AD2B3B4DF616D2C0B66B4CBEDE4C73CA3B42A48AB6D29D",
		"94F1DF2B62F222929FE4FD69D658FD20CE1B77451CFEFE953A19B41BD0109398",
		"E9892194286494D12E4094516587904FE5533EE304AC92A6000AE7D6F56D5B9A",
		"9878879FFD446E504A1D97C0CB53CE7366B98F9D144CB2F7EF401747699845D5",
		"27AD3A0DC982F0C471A476AD0598D8ED1CA49B9AEC27E2EA2E57A74727AF3EC3",
		"5C6A2050B98E3943E6F0B49EF2ACF56BCB1EEB7118E65F23E9B832FCAA35D5FD",
		"67B9FCBF1959B4F2FC38483C66856C7D1994BBE83419BF2FB42196AF42610805",
		"9409D15A88DDB78ECBBB302B7E71FEB29FAFFD113D97C1A7AB15B29C05907822",
		"5BAB3BA065991B6A65D812488DDB6FB219A4F5EAF4B7A9EA2D84EF1D87DAB839",
		"76E7CF30C8418E198FD36D058C9018E4091DC1AFFCA1E24161BD7AB5EB447371",
		"303F45745041FB515FFD348DBE74372F3C7FEBED2387556CD9068B779DC15B9C",
		"1751BA72C87AC93E6D46AB1EBA0D6FA64F7DC1426616C92EDB6E54CA82FB0FBF",
		"F7EAFF7EA03A7E187228D4C80EB966A56385BE0320BED47FA26D008B7ECBB447",
		"C24740B89D6F4EEC7384BEBB9A141A75DD28F81C3021F1340B0DCA3CCB328FC0",
		"F42D0E01621E2E28D779FEEE2906C059D1B8F8D12A11B4F7FDCD90ED7ECD2C6C",
		"EFFCB234EDD4B1F60026B34C418DF3091B0CE965D82DF1E57E51D8469A425493",
		"99B63960BCCF0406C8571FB16FA8313472F7313D53F233FB60CB8DD52D4EE571",
		"AC9F763192C8720315B6F077081CE53A329E521336C9F5B746AD87889CD89EA9",
		"EE016B993D31D64ACC3F1CFFDF21BC10F9524298A97D9AFFC24C98280CAFF855",
		"B7B45C744CB6FC50273FEFC220897788B0E2C0D34204C18C827E7F85DA5C41DA",
		"5D5D750C9EFFC80BA2EB627C6F05B46D15E84EF3A562ED85FD60FB11920093A3",
		"2873D18EC37D4F288F31E360C7A42AB5ABD6D838761C3C474E6F59EED448311F",
	}
)
