//  
//  Copyright 2023 PayPal Inc.
//  
//  Licensed to the Apache Software Foundation (ASF) under one or more
//  contributor license agreements.  See the NOTICE file distributed with
//  this work for additional information regarding copyright ownership.
//  The ASF licenses this file to You under the Apache License, Version 2.0
//  (the "License"); you may not use this file except in compliance with
//  the License.  You may obtain a copy of the License at
//  
//     http://www.apache.org/licenses/LICENSE-2.0
//  
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//  
  
package proto

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"juno/pkg/util"
	"testing"
)

func testRequestResponse(t *testing.T, rawRequest []byte, rawResponse []byte) {
	var r OperationalMessage
	dec := NewDecoder(bytes.NewBuffer(rawRequest))
	if err := dec.Decode(&r); err != nil {
		t.Error(err)
	}
	var encBuffer bytes.Buffer
	enc := NewEncoder(&encBuffer)
	if err := enc.Encode(&r); err != nil {
		t.Error(err)
	}
	if bytes.Compare(rawRequest, encBuffer.Bytes()) != 0 {
		util.HexDump(rawRequest)
		util.HexDump(encBuffer.Bytes())
		t.Error("not equal")
	}
	dec = NewDecoder(bytes.NewBuffer(rawResponse))
	if err := dec.Decode(&r); err != nil {
		t.Error(err)
	}
	//r.PrettyPrint()
}

/*
Request
-----------------------------------------------------
OPaque        : 0x0
OpCode        : 0x1	Create
MsgType       : 0x40	OperationalMessage(Request)
ShardId       : 0x0
Key           : key [6B6579]
Namespace     : DummyNS [44756D6D794E53]
RequestID     : ecca2148-ff4b-11e7-99ea-000c29cadc31
App name      : DummyAppName
Value         : value to store [76616C756520746F2073746F7265]
Lifetime      : 1800

Response
-----------------------------------------------------
OPaque        : 0x0
OpCode        : 0x1	Create
MsgType       : 0x0	OperationalMessage(Response)
OpStatus      : 0x0	Ok
Key           : key [6B6579]
Namespace     : DummyNS [44756D6D794E53]
RequestID     : ecca2148-ff4b-11e7-99ea-000c29cadc31
Value         : []
Version       : 1
Creation Time : 1516608721
Lifetime      : 1800
*/
func TestOpMsgCreate(t *testing.T) {
	var (
		rawRequest = []byte{
			0x50, 0x50, 0x01, 0x40, 0x00, 0x00, 0x00, 0x70,
			0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x38, 0x02, 0x03, 0x65, 0x21,
			0x06, 0x00, 0x00, 0x00, 0xEC, 0xCA, 0x21, 0x48,
			0xFF, 0x4B, 0x11, 0xE7, 0x99, 0xEA, 0x00, 0x0C,
			0x29, 0xCA, 0xDC, 0x31, 0x00, 0x00, 0x07, 0x08,
			0x14, 0x0C, 0xDD, 0x0C, 0x7F, 0x00, 0x00, 0x01,
			0x44, 0x75, 0x6D, 0x6D, 0x79, 0x41, 0x70, 0x70,
			0x4E, 0x61, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x28, 0x01, 0x07, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x0E, 0x44, 0x75, 0x6D, 0x6D,
			0x79, 0x4E, 0x53, 0x6B, 0x65, 0x79, 0x76, 0x61,
			0x6C, 0x75, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x73,
			0x74, 0x6F, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00,
		}
		rawResponse = []byte{
			0x50, 0x50, 0x01, 0x00, 0x00, 0x00, 0x00, 0x58,
			0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x30, 0x02, 0x05, 0x65, 0x21,
			0x22, 0x23, 0x24, 0x00, 0xEC, 0xCA, 0x21, 0x48,
			0xFF, 0x4B, 0x11, 0xE7, 0x99, 0xEA, 0x00, 0x0C,
			0x29, 0xCA, 0xDC, 0x31, 0x00, 0x00, 0x07, 0x08,
			0x00, 0x00, 0x00, 0x01, 0x5A, 0x65, 0x9C, 0xD1,
			0x5A, 0x65, 0xA3, 0xD9, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x18, 0x01, 0x07, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x44, 0x75, 0x6D, 0x6D,
			0x79, 0x4E, 0x53, 0x6B, 0x65, 0x79, 0x00, 0x00,
		}
	)
	testRequestResponse(t, rawRequest, rawResponse)
}

/*
Request
-----------------------------------------------------
OPaque        : 0x0
OpCode        : 0x2	Get
MsgType       : 0x40	OperationalMessage(Request)
ShardId       : 0x0
Key           : key [6B6579]
Namespace     : DummyNS [44756D6D794E53]
RequestID     : c9ac000b-ff4c-11e7-a119-000c29cadc31
App name      : junocli
Value         : []

Response
-----------------------------------------------------
OPaque        : 0x0
OpCode        : 0x2	Get
MsgType       : 0x0	OperationalMessage(Response)
OpStatus      : 0x0	Ok
Key           : key [6B6579]
Namespace     : DummyNS [44756D6D794E53]
RequestID     : c9ac000b-ff4c-11e7-a119-000c29cadc31
Originator RID: ecca2148-ff4b-11e7-99ea-000c29cadc31
Value         : value to store [76616C756520746F2073746F7265]
Version       : 1
Creation Time : 1516608721
Lifetime      : 1429
*/
func TestOpMsgGet(t *testing.T) {
	var (
		rawRequest = []byte{
			0x50, 0x50, 0x01, 0x40, 0x00, 0x00, 0x00, 0x50,
			0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x28, 0x02, 0x02, 0x65, 0x06,
			0xC9, 0xAC, 0x00, 0x0B, 0xFF, 0x4C, 0x11, 0xE7,
			0xA1, 0x19, 0x00, 0x0C, 0x29, 0xCA, 0xDC, 0x31,
			0x10, 0x07, 0xDD, 0x2A, 0x7F, 0x00, 0x00, 0x01,
			0x6A, 0x75, 0x6E, 0x6F, 0x63, 0x6C, 0x69, 0x00,
			0x00, 0x00, 0x00, 0x18, 0x01, 0x07, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x44, 0x75, 0x6D, 0x6D,
			0x79, 0x4E, 0x53, 0x6B, 0x65, 0x79, 0x00, 0x00,
		}
		rawResponse = []byte{
			0x50, 0x50, 0x01, 0x00, 0x00, 0x00, 0x00, 0x78,
			0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x40, 0x02, 0x06, 0x65, 0x68,
			0x21, 0x22, 0x23, 0x24, 0xC9, 0xAC, 0x00, 0x0B,
			0xFF, 0x4C, 0x11, 0xE7, 0xA1, 0x19, 0x00, 0x0C,
			0x29, 0xCA, 0xDC, 0x31, 0xEC, 0xCA, 0x21, 0x48,
			0xFF, 0x4B, 0x11, 0xE7, 0x99, 0xEA, 0x00, 0x0C,
			0x29, 0xCA, 0xDC, 0x31, 0x00, 0x00, 0x05, 0x95,
			0x00, 0x00, 0x00, 0x01, 0x5A, 0x65, 0x9C, 0xD1,
			0x5A, 0x65, 0xA3, 0xD9, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x28, 0x01, 0x07, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x0E, 0x44, 0x75, 0x6D, 0x6D,
			0x79, 0x4E, 0x53, 0x6B, 0x65, 0x79, 0x76, 0x61,
			0x6C, 0x75, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x73,
			0x74, 0x6F, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00,
		}
	)
	testRequestResponse(t, rawRequest, rawResponse)
}

func TestOpMsgUpdate(t *testing.T) {
	var (
		rawRequest = []byte{
			0x50, 0x50, 0x01, 0x40, 0x00, 0x00, 0x00, 0x68,
			0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x30, 0x02, 0x02, 0x65, 0x06,
			0x9D, 0x3B, 0xED, 0x6B, 0x4C, 0x9B, 0x11, 0xE7,
			0x9A, 0x0E, 0x00, 0x0C, 0x29, 0xCA, 0xDC, 0x31,
			0x14, 0x0C, 0xBF, 0x90, 0x7F, 0x00, 0x00, 0x01,
			0x44, 0x75, 0x6D, 0x6D, 0x79, 0x41, 0x70, 0x70,
			0x4E, 0x61, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x28, 0x01, 0x07, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x0E, 0x44, 0x75, 0x6D, 0x6D,
			0x79, 0x4E, 0x53, 0x6B, 0x65, 0x79, 0x76, 0x61,
			0x6C, 0x75, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x73,
			0x74, 0x6F, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00,
		}
		rawResponse = []byte{
			0x50, 0x50, 0x01, 0x00, 0x00, 0x00, 0x00, 0x50,
			0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x28, 0x02, 0x04, 0x21, 0x22,
			0x23, 0x65, 0x00, 0x00, 0x00, 0x00, 0x06, 0x53,
			0x00, 0x00, 0x00, 0x02, 0x59, 0x39, 0xD1, 0xE4,
			0x9D, 0x3B, 0xED, 0x6B, 0x4C, 0x9B, 0x11, 0xE7,
			0x9A, 0x0E, 0x00, 0x0C, 0x29, 0xCA, 0xDC, 0x31,
			0x00, 0x00, 0x00, 0x18, 0x01, 0x07, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x44, 0x75, 0x6D, 0x6D,
			0x79, 0x4E, 0x53, 0x6B, 0x65, 0x79, 0x00, 0x00,
		}
	)
	testRequestResponse(t, rawRequest, rawResponse)
}

func TestOpMsgSet(t *testing.T) {
	var (
		rawRequest = []byte{
			0x50, 0x50, 0x01, 0x40, 0x00, 0x00, 0x00, 0x68,
			0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x30, 0x02, 0x02, 0x65, 0x06,
			0xCA, 0x5C, 0x76, 0x3A, 0x4C, 0x9B, 0x11, 0xE7,
			0x97, 0xED, 0x00, 0x0C, 0x29, 0xCA, 0xDC, 0x31,
			0x14, 0x0C, 0xBF, 0x92, 0x7F, 0x00, 0x00, 0x01,
			0x44, 0x75, 0x6D, 0x6D, 0x79, 0x41, 0x70, 0x70,
			0x4E, 0x61, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x28, 0x01, 0x07, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x0E, 0x44, 0x75, 0x6D, 0x6D,
			0x79, 0x4E, 0x53, 0x6B, 0x65, 0x79, 0x76, 0x61,
			0x6C, 0x75, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x73,
			0x74, 0x6F, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00,
		}
		rawResponse = []byte{
			0x50, 0x50, 0x01, 0x00, 0x00, 0x00, 0x00, 0x50,
			0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x28, 0x02, 0x04, 0x21, 0x22,
			0x23, 0x65, 0x00, 0x00, 0x00, 0x00, 0x06, 0x07,
			0x00, 0x00, 0x00, 0x03, 0x59, 0x39, 0xD1, 0xE4,
			0xCA, 0x5C, 0x76, 0x3A, 0x4C, 0x9B, 0x11, 0xE7,
			0x97, 0xED, 0x00, 0x0C, 0x29, 0xCA, 0xDC, 0x31,
			0x00, 0x00, 0x00, 0x18, 0x01, 0x07, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x44, 0x75, 0x6D, 0x6D,
			0x79, 0x4E, 0x53, 0x6B, 0x65, 0x79, 0x00, 0x00,
		}
	)
	testRequestResponse(t, rawRequest, rawResponse)
}

func TestOpMsgDestroy(t *testing.T) {
	var (
		rawRequest = []byte{
			0x50, 0x50, 0x01, 0x40, 0x00, 0x00, 0x00, 0x58,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x30, 0x02, 0x02, 0x65, 0x06,
			0xEC, 0x74, 0x4E, 0x77, 0x4C, 0x9B, 0x11, 0xE7,
			0x9F, 0x48, 0x00, 0x0C, 0x29, 0xCA, 0xDC, 0x31,
			0x14, 0x0C, 0xBF, 0x94, 0x7F, 0x00, 0x00, 0x01,
			0x44, 0x75, 0x6D, 0x6D, 0x79, 0x41, 0x70, 0x70,
			0x4E, 0x61, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x18, 0x01, 0x07, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x44, 0x75, 0x6D, 0x6D,
			0x79, 0x4E, 0x53, 0x6B, 0x65, 0x79, 0x00, 0x00,
		}
		rawResponse = []byte{
			0x50, 0x50, 0x01, 0x00, 0x00, 0x00, 0x00, 0x50,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x28, 0x02, 0x04, 0x21, 0x22,
			0x23, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0xCE,
			0x00, 0x00, 0x00, 0x03, 0x59, 0x39, 0xD1, 0xE4,
			0xEC, 0x74, 0x4E, 0x77, 0x4C, 0x9B, 0x11, 0xE7,
			0x9F, 0x48, 0x00, 0x0C, 0x29, 0xCA, 0xDC, 0x31,
			0x00, 0x00, 0x00, 0x18, 0x01, 0x07, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x44, 0x75, 0x6D, 0x6D,
			0x79, 0x4E, 0x53, 0x6B, 0x65, 0x79, 0x00, 0x00,
		}
	)
	testRequestResponse(t, rawRequest, rawResponse)
}

func testUDFRequestResponse(t *testing.T, op OpCode, key []byte, fname []byte, params []byte) {

	request := &OperationalMessage{}
	var payload Payload
	payload.SetWithClearValue(params)
	request.SetRequest(op, key, []byte("testns"), &payload, 0)
	request.SetNewRequestID()
	request.SetCorrelationID([]byte("corrid"))
	request.SetUDFName(fname)
	//request.PrettyPrint(os.Stdout)

	var encBuffer bytes.Buffer
	enc := NewEncoder(&encBuffer)
	if err := enc.Encode(request); err != nil {
		t.Error(err)
	}

	var r OperationalMessage
	dec := NewDecoder(bytes.NewBuffer(encBuffer.Bytes()))
	if err := dec.Decode(&r); err != nil {
		t.Error(err)
	}

	//r.PrettyPrint(os.Stdout)
	var encBuffer2 bytes.Buffer
	enc = NewEncoder(&encBuffer2)
	if err := enc.Encode(&r); err != nil {
		t.Error(err)
	}

	if bytes.Compare(encBuffer2.Bytes(), encBuffer.Bytes()) != 0 {
		util.HexDump(encBuffer2.Bytes())
		util.HexDump(encBuffer.Bytes())
		t.Error("not equal")
	}

}

func TestUDF(t *testing.T) {
	param := make([]byte, 4)
	binary.BigEndian.PutUint32(param, 5)

	fmt.Print("test udf get\n")
	testUDFRequestResponse(t, OpCodeUDFGet, []byte("key1"), []byte("sc"), param)

	fmt.Print("test udf set\n")
	testUDFRequestResponse(t, OpCodeUDFSet, []byte("key2"), []byte("sc"), param)
}
