option java_package = "org.ebayopensource.sherlock.frontier.protocol.v1";
option java_outer_classname = "ProtobufV1";
option optimize_for = SPEED;

package sherlockproto;

/****************************************
 * Request/Response Messages
 ****************************************/

/**
 * Available client request types.
 */
enum ReqRespTypeProto {
  GET_SESSION       = 1;
  REGISTER          = 2;
  POST_REGISTERED   = 3;
  POST_UNREGISTERED = 4;
}

/**
 * Request to get a session.
 */
message GetSessionReqProto {
  repeated PairProto user_pair = 1;
}

/**
 * Response for getting a session.
 */
message GetSessionRespProto {
  enum Status {
    SUCCESS  = 1;
    REDIRECT = 2;
  }

  optional Status status = 1;

  optional SessionInfoProto     session_info      = 2;
  optional RedirectSessionProto redirect_session  = 3;
}

/**
 * Information pertaining to a session.
 */
message SessionInfoProto {
  required bytes id = 1;
}

/**
 * Redirection information for a session.
 */
message RedirectSessionProto {
  required SocketAddressProto socket_address = 1;
}

/**
 * Registration operation to perform.
 */
message RegisterReqProto {
  required bytes          session_id = 1;
  required MetricSetProto metric_set = 2;
}

/**
 * Result of a registration operation.
 */
message RegisterRespProto {
  repeated bytes metric_id = 1;
}

/**
 * When a response will be generated for a post request.
 */
enum PostConcernProto {
  UNACKNOWLEDGED = 1;
  ACKNOWLEDGED   = 2;
  PROCESSED      = 3;
}

/**
 * Post (registered) operation to perform.
 */
message PostRegisteredReqProto {
  required bytes            session_id   = 1;
  required PostConcernProto post_concern = 2;
  required fixed32          epoch_second = 3;
  repeated bytes            metric_id    = 4;
  repeated MetricValueProto metric_value = 5;
}

/**
 * Result of a post (registered) operation.
 */
message PostRegisteredRespProto {
}

/**
 * Post (unregistered) operation to perform.
 */
message PostUnregisteredReqProto {
  required bytes            session_id   = 1;
  required PostConcernProto post_concern = 2;
  required fixed32          epoch_second = 3;
  required MetricSetProto   metric_set   = 4;
}

/**
 * Result of post (unregistered) operation.
 */
message PostUnregisteredRespProto {
}

/****************************************
 * Server Messages
 ****************************************/

/**
 * A notification sent by the server to a client
 */
message ServerNotificationProto {
  enum Type {
    SESSION = 1;
  }

  optional Type type = 1;

  // Union types

  optional SessionNotificationProto session_notification = 2;
}

/**
 * Session notification
 */
message SessionNotificationProto {
  enum Type {
    REDIRECT = 1;
    EXPIRED  = 2;
  }

  required bytes session_id = 1;
  optional Type  type       = 2;

  optional RedirectSessionProto redirect_session = 3;
  optional string               expire_cause     = 4;
}

/**
 * A response sent by the server to a client about a request
 */
message ServerResponseProto {
  enum Status {
    SUCCESS = 1;
    FAILURE = 2;
  }

  enum ErrorCode {

    // An unexpected condition was encountered
    SERVER_ERROR = 1;

    // The user is not authorized to get a session or an invalid session id was provided.
    BAD_CREDENTIALS = 2;

    // The request is either malformed or violates a field constraint.
    BAD_REQUEST = 3;

    // A rate limit has been exceeded.
    EXCEEDED_RATE = 4;

    // A quota has been exceeded.
    EXCEEDED_QUOTA = 5;

    // The node did not receive a timely response from an upstream channel.
    UPSTREAM_TIMEOUT = 6;

    // The required upstream channel is unavailable but may become available later.
    UPSTREAM_UNAVAILABLE = 7;
  }

  optional ReqRespTypeProto type     = 1;
  required uint32           id       = 2;
  required Status           status   = 3;
  optional ErrorCode        err_code = 4;
  optional string           err_msg  = 5;

  // Union types

  optional GetSessionRespProto       get_session_response       = 6;
  optional RegisterRespProto         register_response          = 7;
  optional PostRegisteredRespProto   post_registered_response   = 8;
  optional PostUnregisteredRespProto post_unregistered_response = 9;
}

/****************************************
 * Client/Server Top-Level Messages
 ****************************************/

/**
 * A request from the client to the server.
 */
message ClientRequestProto {
  repeated PairProto        header = 1;
  optional ReqRespTypeProto type   = 2;
  required uint32           id     = 3;

  // Union types

  optional GetSessionReqProto       get_session_request       = 4;
  optional RegisterReqProto         register_request          = 5;
  optional PostRegisteredReqProto   post_registered_request   = 6;
  optional PostUnregisteredReqProto post_unregistered_request = 7;
}

/**
 * A message from the server to the client.
 */
message ServerMessageProto {
  enum Type {
    NOTIFICATION = 1;
    RESPONSE     = 2;
  }

  repeated PairProto header = 1;
  required Type      type   = 2;

  // Union types

  optional ServerNotificationProto server_notification = 3;
  optional ServerResponseProto     server_response     = 4;
}

/****************************************
 * Metric Datatypes
 ****************************************/

/**
 * A set of metrics in a topology.
 */
message MetricSetProto {
  required uint32      resolution_seconds = 1;
  required string      profile            = 2;
  repeated PairProto   dimension          = 3;
  repeated MetricProto metric             = 4;
}

/**
 * A metric.
 */
message MetricProto {
  enum MetricTypeProto {
    GAUGE                      = 1;
    COUNTER                    = 2;
    COUNTER_CREATE_GAUGE       = 3;
    COUNTER_REPLACE_WITH_GAUGE = 4;
  }
  enum ValueTypeProto {
    INT    = 1;
    LONG   = 2;
    FLOAT  = 3;
    DOUBLE = 4;
  }

  required string           name        = 1;
  optional MetricTypeProto  metric_type = 2;
  optional ValueTypeProto   value_type  = 3;
  optional MetricValueProto value       = 4;
}

/**
 * A metric value.
 */
message MetricValueProto {
  optional int32  int32_value  = 1;
  optional int64  int64_value  = 2;
  optional float  float_value  = 3;
  optional double double_value = 4;
}

/****************************************
 * Common Datatypes
 ****************************************/

/**
 * A pair in an associative array.
 */
message PairProto {
  required string key   = 1;
  required string value = 2;
}

/**
 * A remote socket address.
 */
message SocketAddressProto {
  required string address = 1;
  required uint32 port    = 2;
}